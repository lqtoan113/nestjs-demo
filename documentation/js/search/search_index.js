var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.365,1,1.894]],["body/controllers/AppController.html",[0,2.296,1,2.638,2,1.414,3,0.388,4,0.335,5,0.335,6,2.593,7,0.388,8,1.164,9,4.21,10,5.1,11,1.56,12,0.038,13,0.598,14,3.142,15,1.164,16,1.762,17,4.223,18,3.142,19,0.522,20,0.706,21,2.38,22,2.593,23,1.962,24,3.142,25,1.962,26,0.388,27,0.1,28,1.962,29,3.142,30,3.142,31,2.232,32,2.593,33,2.593,34,1.762,35,3.142,36,3.142,37,3.142,38,3.142,39,3.142,40,0.026,41,0.026]],["title/modules/AppModule.html",[42,1.365,43,1.894]],["body/modules/AppModule.html",[1,2.443,2,1.471,3,0.271,4,0.233,5,0.233,12,0.038,19,0.655,20,0.493,21,2.428,22,1.808,26,0.271,27,0.07,40,0.02,41,0.02,42,1.76,43,3.369,44,1.093,45,1.093,46,1.368,47,1.368,48,1.093,49,2.443,50,1.368,51,1.808,52,1.808,53,1.808,54,2.706,55,2.706,56,2.042,57,1.368,58,1.368,59,2.191,60,2.779,61,3.269,62,4.336,63,1.808,64,1.556,65,1.093,66,2.191,67,1.951,68,2.191,69,2.191,70,1.444,71,2.191,72,2.191,73,2.191,74,0.463,75,2.699,76,3.269,77,2.191,78,3.269,79,2.191,80,3.269,81,2.191,82,1.818,83,2.191,84,2.699,85,2.191,86,2.443,87,3.269,88,2.042,89,3.269,90,3.269,91,2.699,92,3.269,93,3.269,94,2.191,95,2.191,96,2.191,97,2.191,98,2.191,99,2.191,100,2.191,101,2.191,102,2.191,103,2.191,104,2.191,105,2.191,106,2.191]],["title/injectables/AppService.html",[21,1.513,107,0.682]],["body/injectables/AppService.html",[3,0.469,4,0.405,5,0.405,7,0.469,8,1.317,9,4.528,12,0.038,13,0.538,15,1.047,16,1.765,19,0.469,20,0.854,21,2.384,26,0.469,27,0.121,34,1.765,40,0.029,41,0.029,107,1.074,108,1.709,109,3.135,110,3.798,111,3.798,112,3.798,113,3.798,114,3.798]],["title/guards/AuthGuard.html",[115,1.686,116,1.686]],["body/guards/AuthGuard.html",[3,0.288,4,0.248,5,0.248,7,0.288,8,0.942,12,0.038,13,0.484,15,0.641,19,0.552,20,0.523,23,2.136,26,0.288,27,0.074,28,1.454,34,0.86,40,0.021,41,0.021,70,1.757,74,0.484,88,1.454,107,0.769,115,1.294,116,1.901,117,2.328,118,1.921,119,2.879,120,4.758,121,1.454,122,1.921,123,4.106,124,2.094,125,2.328,126,1.146,127,0.852,128,1.146,129,2.328,130,3.687,131,2.328,132,2.822,133,3.419,134,2.328,135,2.328,136,2.822,137,1.921,138,1.654,139,1.454,140,1.921,141,1.294,142,1.294,143,3.419,144,2.484,145,2.328,146,4.244,147,2.328,148,2.328,149,1.454,150,3.419,151,2.879,152,1.824,153,2.328,154,2.328,155,2.328,156,1.921,157,2.429,158,2.328,159,1.654,160,1.654,161,2.328,162,2.328,163,2.328,164,1.921,165,2.328,166,2.328,167,2.328,168,2.328,169,2.328,170,3.419,171,2.328,172,2.328,173,2.328,174,2.328]],["title/injectables/AuthService.html",[107,0.682,175,1.513]],["body/injectables/AuthService.html",[3,0.236,4,0.203,5,0.203,7,0.236,8,0.811,12,0.038,13,0.509,15,0.811,19,0.54,20,0.429,26,0.236,27,0.061,34,1.087,40,0.018,41,0.018,70,1.087,74,0.509,82,1.636,84,1.574,107,0.662,108,0.858,119,3.277,121,1.838,122,1.574,123,3.807,124,1.958,126,1.204,127,0.896,128,1.204,136,1.574,139,1.191,140,1.574,142,1.636,144,2.833,146,2.429,151,2.553,152,1.617,156,2.429,157,3.416,159,2.091,160,2.091,175,1.468,176,1.574,177,3.593,178,2.943,179,1.907,180,1.907,181,1.793,182,1.907,183,2.429,184,2.429,185,2.943,186,1.818,187,1.907,188,1.907,189,2.429,190,3.593,191,1.636,192,2.429,193,4.04,194,2.943,195,1.907,196,1.907,197,1.907,198,2.943,199,1.907,200,1.907,201,1.907,202,1.907,203,1.907,204,1.907,205,2.943,206,2.943,207,1.636,208,1.907,209,1.838,210,1.907,211,1.838,212,1.907,213,1.907,214,2.429,215,1.907,216,4.04,217,2.943,218,2.943,219,1.907,220,1.907,221,2.943,222,2.943,223,1.907,224,1.907,225,1.907,226,1.907,227,1.907,228,1.907,229,1.907,230,1.907,231,1.907]],["title/entities/Cat.html",[67,1.513,232,1.686]],["body/entities/Cat.html",[3,0.333,4,0.287,5,0.287,7,0.333,11,1.766,12,0.038,13,0.677,16,1.404,19,0.47,26,0.333,27,0.121,40,0.023,41,0.023,67,1.897,74,0.741,86,1.685,88,2.375,127,1.097,152,1.711,207,2.448,232,2.114,233,2.226,234,1.549,235,2.75,236,3.128,237,2.386,238,3.634,239,2.697,240,2.375,241,2.226,242,2.697,243,4.436,244,2.697,245,2.226,246,2.697,247,3.634,248,1.5,249,3.138,250,1.916,251,3.802,252,1.916,253,2.386,254,2.697,255,2.697,256,1.916,257,2.697,258,2.697,259,2.226]],["title/controllers/CatController.html",[0,1.365,260,1.894]],["body/controllers/CatController.html",[0,0.926,2,0.926,3,0.254,4,0.219,5,0.219,7,0.254,8,0.859,11,1.668,12,0.038,13,0.639,15,1.244,19,0.558,20,0.463,23,1.285,26,0.254,27,0.066,28,1.285,31,2.676,32,1.699,33,1.699,34,1.668,40,0.019,41,0.019,74,0.595,115,1.144,116,1.144,126,1.408,127,1.047,128,1.408,144,1.144,152,0.926,207,2.643,237,2.598,253,1.027,260,1.948,261,1.699,262,1.699,263,1.699,264,2.575,265,3.119,266,3.119,267,4.202,268,3.119,269,1.699,270,2.253,271,2.058,272,2.058,273,3.119,274,2.058,275,2.058,276,3.119,277,2.058,278,2.058,279,2.058,280,2.464,281,3.119,282,2.058,283,2.575,284,2.058,285,4.202,286,2.058,287,2.058,288,1.699,289,1.879,290,1.699,291,2.058,292,1.699,293,1.285,294,2.058,295,1.699,296,2.058,297,2.058,298,2.058,299,1.699,300,2.058,301,1.699,302,2.058,303,1.699,304,2.058,305,2.058,306,2.058,307,2.676,308,1.462,309,1.462,310,2.058,311,2.058,312,2.058,313,2.058,314,2.058,315,2.058,316,2.058]],["title/modules/CatModule.html",[42,1.365,54,1.686]],["body/modules/CatModule.html",[2,1.808,3,0.361,4,0.311,5,0.311,8,0.804,12,0.038,13,0.413,15,0.804,19,0.663,20,0.656,26,0.361,27,0.093,40,0.025,41,0.025,42,2.067,44,1.456,45,1.456,46,1.823,47,1.823,48,1.456,49,2.869,50,1.823,54,2.981,56,2.509,57,1.823,58,1.823,60,2.074,64,2.074,65,1.456,67,1.456,74,0.413,126,0.978,127,0.727,128,0.978,141,1.623,260,2.869,263,2.409,289,2.675,290,2.409,317,2.409,318,2.409,319,2.919,320,2.409,321,3.316,322,4.084,323,2.919,324,3.316,325,2.074,326,3.316,327,2.919,328,2.919,329,2.409,330,1.623,331,2.409,332,2.919,333,2.409,334,2.919]],["title/injectables/CatService.html",[107,0.682,289,1.513]],["body/injectables/CatService.html",[3,0.243,4,0.209,5,0.209,7,0.243,8,0.83,12,0.038,13,0.661,15,1.219,19,0.547,20,0.442,25,2.563,26,0.243,27,0.063,34,1.634,40,0.019,41,0.019,65,0.98,67,2.501,74,0.626,91,1.622,107,0.677,108,0.884,119,3.316,121,1.881,126,1.483,127,1.103,128,1.483,142,1.093,144,2.035,151,2.139,152,1.847,157,2.139,184,2.485,192,2.485,207,2.282,237,2.564,248,1.093,253,1.502,264,2.485,269,2.485,270,2.208,280,2.501,289,1.502,292,1.622,307,3.143,308,1.396,309,1.396,329,1.622,335,1.622,336,3.011,337,4.103,338,3.011,339,3.011,340,1.965,341,1.965,342,3.011,343,1.965,344,3.011,345,1.965,346,1.965,347,3.011,348,1.965,349,3.011,350,1.965,351,1.965,352,1.622,353,1.965,354,1.965,355,1.965,356,3.661,357,1.965,358,1.965,359,3.011,360,3.011,361,1.965,362,1.965]],["title/classes/CreateCatDTO.html",[27,0.097,270,1.513]],["body/classes/CreateCatDTO.html",[3,0.368,4,0.317,5,0.317,7,0.368,11,1.503,12,0.038,13,0.657,16,1.713,19,0.368,26,0.503,27,0.148,40,0.025,41,0.025,74,0.657,127,1.243,149,1.858,234,1.657,235,3.115,236,3.543,237,2.314,240,2.897,252,2.113,253,2.314,256,2.891,270,2.03,280,1.484,363,1.654,364,2.113,365,2.974,366,3.115,367,2.974,368,3.828,369,2.974,370,2.455,371,1.654,372,3.828,373,2.455,374,2.455,375,2.455,376,3.359,377,3.359,378,2.455,379,2.113,380,2.455,381,2.455,382,2.455]],["title/injectables/LoggerMiddleware.html",[107,0.682,330,1.686]],["body/injectables/LoggerMiddleware.html",[3,0.422,4,0.364,5,0.364,7,0.422,8,1.23,12,0.037,13,0.484,15,0.941,19,0.552,20,0.768,23,3.293,26,0.422,27,0.109,40,0.027,41,0.027,74,0.484,107,1.004,108,1.538,126,1.145,127,0.851,128,1.145,141,1.9,299,2.82,301,4.352,325,2.427,330,2.482,383,2.82,384,4.464,385,4.464,386,4.972,387,4.352,388,5.272,389,3.416,390,3.416,391,4.464,392,2.82,393,3.416]],["title/injectables/LoggingInterceptor.html",[107,0.682,293,1.894]],["body/injectables/LoggingInterceptor.html",[3,0.419,4,0.361,5,0.361,7,0.419,8,1.223,12,0.037,13,0.48,15,0.933,19,0.612,20,0.761,26,0.419,27,0.108,34,1.251,40,0.027,41,0.027,74,0.48,107,0.998,108,1.524,126,1.135,127,0.844,128,1.135,130,4.338,132,2.795,137,4.087,138,2.406,141,1.883,293,2.772,387,4.087,394,2.795,395,4.439,396,4.439,397,5.255,398,3.386,399,4.439,400,3.386,401,3.386,402,3.386,403,3.386,404,3.386]],["title/classes/LoginUserDTO.html",[27,0.097,181,1.513]],["body/classes/LoginUserDTO.html",[3,0.424,4,0.366,5,0.366,7,0.424,11,1.653,12,0.037,13,0.634,16,2.143,19,0.424,26,0.553,27,0.159,40,0.028,41,0.028,74,0.634,82,2.937,181,2.234,186,1.544,191,2.937,209,2.143,211,2.143,234,1.823,363,1.908,366,3.509,371,1.908,405,2.438,406,4.36,407,3.431,408,3.431]],["title/classes/RegisterUserDTO.html",[27,0.097,186,1.365]],["body/classes/RegisterUserDTO.html",[3,0.39,4,0.336,5,0.336,7,0.39,11,1.887,12,0.037,13,0.723,16,2.154,19,0.39,26,0.523,27,0.153,40,0.026,41,0.026,74,0.723,82,2.841,181,1.574,186,1.906,191,2.841,209,2.986,211,2.986,234,1.725,363,1.754,366,3.559,371,1.754,405,2.241,406,4.217,409,3.154,410,3.154,411,3.154,412,3.154]],["title/classes/UpdateCatDTO.html",[27,0.097,280,1.513]],["body/classes/UpdateCatDTO.html",[3,0.368,4,0.317,5,0.317,7,0.368,11,1.503,12,0.038,13,0.657,16,1.713,19,0.368,26,0.503,27,0.148,40,0.025,41,0.025,74,0.657,127,1.243,149,1.858,234,1.657,235,3.115,236,3.543,237,2.314,240,2.897,252,2.113,253,2.314,256,2.891,270,1.484,280,2.03,363,1.654,364,2.113,366,3.115,368,3.828,370,2.455,371,1.654,372,3.828,373,2.455,374,2.455,375,2.455,376,3.359,377,3.359,378,2.455,379,2.113,380,2.455,381,2.455,382,2.455,413,2.974,414,2.974,415,2.974]],["title/entities/User.html",[70,1.12,232,1.686]],["body/entities/User.html",[3,0.324,4,0.28,5,0.28,7,0.324,11,1.969,12,0.038,13,0.755,16,2.012,19,0.536,26,0.324,27,0.119,40,0.023,41,0.023,70,1.602,74,0.755,82,2.412,86,1.639,88,2.329,191,2.412,207,2.412,209,2.709,211,2.709,214,3.581,232,2.074,234,1.519,235,2.709,237,1.861,238,3.581,240,2.329,241,3.581,243,4.576,245,2.167,247,2.167,248,1.459,249,3.581,250,1.865,259,2.167,416,2.167,417,2.625,418,2.625,419,2.625,420,2.625,421,2.625,422,2.625,423,3.581,424,2.625,425,2.625,426,2.625]],["title/controllers/UserController.html",[0,1.365,427,1.894]],["body/controllers/UserController.html",[0,1.235,2,1.235,3,0.339,4,0.292,5,0.292,7,0.339,8,1.06,11,1.641,12,0.038,13,0.629,15,1.225,19,0.627,20,0.617,26,0.339,27,0.088,28,1.714,31,1.95,34,1.641,40,0.024,41,0.024,74,0.545,116,1.526,124,1.81,126,1.29,127,0.959,128,1.29,142,1.526,175,2.218,181,2.404,183,3.977,186,2.168,262,2.265,283,2.265,288,2.265,295,2.265,303,2.265,427,2.404,428,2.265,429,2.744,430,4.818,431,3.849,432,3.177,433,2.744,434,2.744,435,2.744,436,3.849,437,2.744,438,2.744,439,3.849,440,2.744,441,2.265,442,2.265,443,2.265,444,2.744,445,2.744,446,2.744,447,2.744,448,2.744,449,2.744]],["title/modules/UserModule.html",[42,1.365,55,1.686]],["body/modules/UserModule.html",[2,1.703,3,0.331,4,0.285,5,0.285,8,0.738,12,0.038,13,0.379,15,0.738,19,0.677,20,0.602,26,0.331,27,0.086,40,0.023,41,0.023,42,1.974,44,1.337,45,1.337,46,1.673,47,1.673,48,1.337,49,2.74,50,1.673,55,3.046,56,2.363,57,1.673,58,1.673,60,1.903,64,1.903,65,1.337,70,0.989,74,0.379,124,2.125,126,0.898,127,0.668,128,0.898,139,1.673,141,1.489,159,1.903,160,1.903,175,2.604,320,2.211,321,3.123,322,3.934,324,3.123,325,1.903,326,3.123,330,1.489,331,2.211,333,2.211,427,2.74,442,2.211,443,2.211,450,2.211,451,2.211,452,2.679,453,2.679,454,2.679,455,2.211,456,2.679,457,2.679,458,2.679,459,2.679,460,2.679,461,2.679,462,2.679]],["title/injectables/UserService.html",[107,0.682,124,1.235]],["body/injectables/UserService.html",[3,0.326,4,0.281,5,0.281,7,0.326,8,1.03,12,0.038,13,0.67,15,1.197,16,1.605,19,0.617,20,0.592,25,2.955,26,0.326,27,0.084,34,1.605,40,0.023,41,0.023,65,1.314,70,1.381,74,0.615,107,0.84,108,1.185,121,2.335,124,1.523,126,1.456,127,1.083,128,1.456,142,1.464,144,2.079,152,1.185,186,2.248,191,2.079,248,1.464,253,1.314,307,3.088,308,1.871,309,1.871,352,2.174,432,3.086,441,2.174,455,2.174,463,2.174,464,4.73,465,3.738,466,2.633,467,2.633,468,3.738,469,2.633,470,3.738,471,2.633,472,3.738,473,2.633,474,2.633,475,2.633,476,2.633,477,2.633,478,2.633]],["title/coverage.html",[479,2.929]],["body/coverage.html",[0,2.039,1,1.777,5,0.303,6,2.348,12,0.037,21,1.419,27,0.156,40,0.024,41,0.024,48,1.419,67,1.419,70,1.05,74,0.403,107,1.196,109,2.348,115,1.582,116,1.582,118,2.348,124,1.159,152,1.28,175,1.419,176,2.348,181,1.419,186,1.28,232,2.194,233,2.348,260,1.777,261,2.348,270,1.419,280,1.419,289,1.419,293,1.777,330,1.582,335,2.348,364,2.803,379,2.021,383,2.348,394,2.348,405,2.803,416,2.348,427,1.777,428,2.348,463,2.348,479,2.021,480,2.844,481,2.844,482,2.844,483,5.993,484,4.53,485,4.53,486,4.893,487,2.844,488,4.53,489,2.844,490,2.348,491,2.844,492,3.946,493,2.844]],["title/dependencies.html",[45,1.817,494,2.096]],["body/dependencies.html",[12,0.038,20,0.834,27,0.15,40,0.029,41,0.029,45,1.85,63,3.061,65,1.85,75,3.061,138,2.634,139,2.316,189,3.061,248,2.062,250,2.634,371,2.062,392,3.061,495,5.17,496,3.708,497,3.708,498,3.708,499,3.708,500,3.708,501,3.708,502,3.708,503,3.708,504,3.708,505,3.708,506,3.708,507,3.708,508,3.708,509,3.708,510,3.708,511,3.708]],["title/miscellaneous/enumerations.html",[512,1.586,513,3.007]],["body/miscellaneous/enumerations.html",[7,0.529,12,0.036,40,0.032,41,0.032,70,1.898,423,4.242,512,2.671,513,3.529,514,4.276,515,4.276,516,5.139,517,5.51,518,5.139]],["title/miscellaneous/functions.html",[512,1.586,519,3.007]],["body/miscellaneous/functions.html",[7,0.562,12,0.033,40,0.033,41,0.033,48,2.822,490,3.755,512,2.842,519,3.755,520,4.549]],["title/index.html",[7,0.314,521,2.539,522,2.539]],["body/index.html",[4,0.322,12,0.037,25,1.886,40,0.025,41,0.025,164,2.493,479,2.146,523,3.02,524,3.02,525,4.112,526,3.02,527,3.02,528,3.02,529,3.02,530,3.02,531,3.02,532,2.493,533,4.675,534,3.02,535,3.02,536,3.02,537,4.675,538,5.543,539,3.02,540,3.02,541,3.02,542,5.417,543,3.02,544,3.02,545,4.112,546,3.02,547,3.02,548,3.02,549,3.02,550,4.112,551,4.112,552,3.02,553,3.02,554,3.02,555,4.112,556,4.112,557,3.02,558,3.02,559,3.02,560,3.02,561,3.02,562,2.493,563,3.02,564,3.02,565,3.02,566,3.02,567,3.02,568,3.02,569,3.02,570,3.02,571,3.02,572,2.493,573,3.02,574,3.02,575,3.02,576,3.02,577,3.02,578,3.02,579,2.493]],["title/modules.html",[44,2.057]],["body/modules.html",[12,0.032,40,0.032,41,0.032,43,2.715,44,2.169,54,2.417,55,2.417,562,4.58,580,5.549,581,5.549,582,5.549]],["title/overview.html",[583,3.403]],["body/overview.html",[2,1.511,12,0.036,21,2.46,40,0.027,41,0.027,42,1.511,43,3.608,44,1.675,45,1.675,46,2.097,47,2.097,48,1.675,49,2.097,50,2.097,51,2.771,52,2.771,53,2.771,54,3.025,55,3.165,56,2.757,57,2.097,58,2.097,86,2.097,108,1.511,115,1.867,124,2.008,149,2.097,175,2.46,289,2.46,317,2.771,318,2.771,363,1.867,450,2.771,451,2.771,583,2.771,584,4.413,585,3.357,586,3.357,587,3.357]],["title/properties.html",[234,1.484,494,2.096]],["body/properties.html",[12,0.037,40,0.032,41,0.032,234,1.821,532,3.691,572,3.691,579,3.691,588,4.471,589,4.471,590,4.471]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":589,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"overview.html":{}}}],["1+1",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["10",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.0",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["1433",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["1d",{"_index":461,"title":{},"body":{"modules/UserModule.html":{}}}],["2",{"_index":585,"title":{},"body":{"overview.html":{}}}],["3",{"_index":584,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":587,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":586,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["9.3.2",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{}}}],["access_token",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["admin",{"_index":516,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{}}}],["already",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":563,"title":{},"body":{"index.html":{}}}],["api/v1/user",{"_index":429,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":540,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":531,"title":{},"body":{"index.html":{}}}],["apply(loggermiddleware",{"_index":333,"title":{},"body":{"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["appmodule",{"_index":43,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":21,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["assign",{"_index":166,"title":{},"body":{"guards/AuthGuard.html":{}}}],["async",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CatService.html":{}}}],["auth",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authguard",{"_index":116,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/CatController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["author",{"_index":572,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":175,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CatService.html":{}}}],["backers",{"_index":564,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["badrequestexception('email",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(requestbody.password,userbyemail.password",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(requestbody.password",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["beforeinsert",{"_index":247,"title":{},"body":{"entities/Cat.html":{},"entities/User.html":{}}}],["belong",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{}}}],["body",{"_index":283,"title":{},"body":{"controllers/CatController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":240,"title":{},"body":{"entities/Cat.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":582,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":580,"title":{},"body":{"modules.html":{}}}],["building",{"_index":526,"title":{},"body":{"index.html":{}}}],["c",{"_index":375,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["calc",{"_index":113,"title":{},"body":{"injectables/AppService.html":{}}}],["callhandler",{"_index":397,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["canactivate",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cat",{"_index":67,"title":{"entities/Cat.html":{}},"body":{"modules/AppModule.html":{},"entities/Cat.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"coverage.html":{}}}],["cat.controller",{"_index":328,"title":{},"body":{"modules/CatModule.html":{}}}],["cat.entity",{"_index":329,"title":{},"body":{"modules/CatModule.html":{},"injectables/CatService.html":{}}}],["cat.isactive",{"_index":362,"title":{},"body":{"injectables/CatService.html":{}}}],["cat.service",{"_index":290,"title":{},"body":{"controllers/CatController.html":{},"modules/CatModule.html":{}}}],["cat/cat.entity",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["cat/cat.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["catch",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catcontroller",{"_index":260,"title":{"controllers/CatController.html":{}},"body":{"controllers/CatController.html":{},"modules/CatModule.html":{},"coverage.html":{}}}],["catmodule",{"_index":54,"title":{"modules/CatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules.html":{},"overview.html":{}}}],["catrepository",{"_index":342,"title":{},"body":{"injectables/CatService.html":{}}}],["cats",{"_index":263,"title":{},"body":{"controllers/CatController.html":{},"modules/CatModule.html":{}}}],["catservice",{"_index":289,"title":{"injectables/CatService.html":{}},"body":{"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"coverage.html":{},"overview.html":{}}}],["ch",{"_index":380,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["check",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":27,"title":{"classes/CreateCatDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":363,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":286,"title":{},"body":{"controllers/CatController.html":{}}}],["cluster_appmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_catmodule",{"_index":317,"title":{},"body":{"modules/CatModule.html":{},"overview.html":{}}}],["cluster_catmodule_providers",{"_index":318,"title":{},"body":{"modules/CatModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":450,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":451,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":243,"title":{},"body":{"entities/Cat.html":{},"entities/User.html":{}}}],["column()@exclude",{"_index":245,"title":{},"body":{"entities/Cat.html":{},"entities/User.html":{}}}],["column({default",{"_index":241,"title":{},"body":{"entities/Cat.html":{},"entities/User.html":{}}}],["configmodule",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":320,"title":{},"body":{"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["configure(consumer",{"_index":321,"title":{},"body":{"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["console.log('error",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{}}}],["console.log('fisrt",{"_index":402,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('request",{"_index":393,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log('second",{"_index":304,"title":{},"body":{"controllers/CatController.html":{}}}],["console.log('third",{"_index":404,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["const",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CatController.html":{},"injectables/CatService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CatService.html":{},"injectables/UserService.html":{}}}],["constructor(catrepository",{"_index":340,"title":{},"body":{"injectables/CatService.html":{}}}],["constructor(jwtservice",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["constructor(private",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"controllers/CatController.html":{},"controllers/UserController.html":{}}}],["constructor(userrepository",{"_index":466,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":324,"title":{},"body":{"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["context",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/CatController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CatController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('/api/v1/user",{"_index":444,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('cats",{"_index":296,"title":{},"body":{"controllers/CatController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":479,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createcat",{"_index":264,"title":{},"body":{"controllers/CatController.html":{},"injectables/CatService.html":{}}}],["createcat(@body",{"_index":306,"title":{},"body":{"controllers/CatController.html":{}}}],["createcat(createcatdto",{"_index":269,"title":{},"body":{"controllers/CatController.html":{},"injectables/CatService.html":{}}}],["createcatdto",{"_index":270,"title":{"classes/CreateCatDTO.html":{}},"body":{"controllers/CatController.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"coverage.html":{}}}],["createcatdto,updatecatdto",{"_index":291,"title":{},"body":{"controllers/CatController.html":{}}}],["createcatdto.createdate",{"_index":308,"title":{},"body":{"controllers/CatController.html":{},"injectables/CatService.html":{},"injectables/UserService.html":{}}}],["createcatdto.updatedate",{"_index":309,"title":{},"body":{"controllers/CatController.html":{},"injectables/CatService.html":{},"injectables/UserService.html":{}}}],["createdate",{"_index":252,"title":{},"body":{"entities/Cat.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["credentials",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["crud",{"_index":354,"title":{},"body":{"injectables/CatService.html":{}}}],["currentdate",{"_index":307,"title":{},"body":{"controllers/CatController.html":{},"injectables/CatService.html":{},"injectables/UserService.html":{}}}],["các",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["cần",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["database",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["date",{"_index":253,"title":{},"body":{"entities/Cat.html":{},"controllers/CatController.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"injectables/UserService.html":{}}}],["datetime",{"_index":251,"title":{},"body":{"entities/Cat.html":{}}}],["declarations",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"classes/CreateCatDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":259,"title":{},"body":{"entities/Cat.html":{},"entities/User.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatController.html":{}}}],["delete(':id",{"_index":273,"title":{},"body":{"controllers/CatController.html":{}}}],["deletebyid",{"_index":336,"title":{},"body":{"injectables/CatService.html":{}}}],["deletebyid(id",{"_index":344,"title":{},"body":{"injectables/CatService.html":{}}}],["deletecatbyid",{"_index":265,"title":{},"body":{"controllers/CatController.html":{}}}],["deletecatbyid(@param('id",{"_index":315,"title":{},"body":{"controllers/CatController.html":{}}}],["deletecatbyid(id",{"_index":272,"title":{},"body":{"controllers/CatController.html":{}}}],["dependencies",{"_index":45,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":532,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":541,"title":{},"body":{"index.html":{}}}],["disable",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["dto/cat.dto",{"_index":292,"title":{},"body":{"controllers/CatController.html":{},"injectables/CatService.html":{}}}],["dto/user.dto",{"_index":441,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":552,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":527,"title":{},"body":{"index.html":{}}}],["email",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["email:saveuser.email",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["email:userbyemail.email",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["encrypt",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["entities",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"entities/Cat.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":232,"title":{"entities/Cat.html":{},"entities/User.html":{}},"body":{"entities/Cat.html":{},"entities/User.html":{},"coverage.html":{}}}],["enumerations",{"_index":513,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{}}}],["example",{"_index":537,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":249,"title":{},"body":{"entities/Cat.html":{},"entities/User.html":{}}}],["executioncontext",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["exist",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CatService.html":{}}}],["expiresin",{"_index":460,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":392,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"dependencies.html":{}}}],["exprired",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{}}}],["false",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"injectables/CatService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findallcat",{"_index":337,"title":{},"body":{"injectables/CatService.html":{}}}],["findalluser",{"_index":464,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail",{"_index":465,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":470,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":338,"title":{},"body":{"injectables/CatService.html":{}}}],["findbyid(id",{"_index":347,"title":{},"body":{"injectables/CatService.html":{}}}],["findcatbyid",{"_index":266,"title":{},"body":{"controllers/CatController.html":{}}}],["findcatbyid(@param('id",{"_index":311,"title":{},"body":{"controllers/CatController.html":{}}}],["findcatbyid(id",{"_index":275,"title":{},"body":{"controllers/CatController.html":{}}}],["firstname",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"entities/User.html":{}}}],["forbiddenexception",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{}}}],["forbiddenexception('invalid",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{}}}],["forbiddenexception('please",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{}}}],["forroutes",{"_index":334,"title":{},"body":{"modules/CatModule.html":{}}}],["forroutes('user",{"_index":462,"title":{},"body":{"modules/UserModule.html":{}}}],["framework",{"_index":525,"title":{},"body":{"index.html":{}}}],["function",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":519,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/calc",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/hi",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':id",{"_index":276,"title":{},"body":{"controllers/CatController.html":{}}}],["get()@useguards(authguard",{"_index":433,"title":{},"body":{"controllers/UserController.html":{}}}],["getallcat",{"_index":267,"title":{},"body":{"controllers/CatController.html":{}}}],["getalluser",{"_index":430,"title":{},"body":{"controllers/UserController.html":{}}}],["getcalc",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethi",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":521,"title":{"index.html":{}},"body":{}}],["grow",{"_index":559,"title":{},"body":{"index.html":{}}}],["guard",{"_index":115,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/CatController.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hash",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hello",{"_index":111,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":569,"title":{},"body":{"index.html":{}}}],["hi",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["host",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":576,"title":{},"body":{"index.html":{}}}],["id",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"injectables/CatService.html":{},"entities/User.html":{}}}],["identifier",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["if(!ismatchpassword",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"modules/CatModule.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"modules/UserModule.html":{}}}],["import",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":107,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CatService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CatService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CatService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":352,"title":{},"body":{"injectables/CatService.html":{},"injectables/UserService.html":{}}}],["injectrepository(cat",{"_index":353,"title":{},"body":{"injectables/CatService.html":{}}}],["injectrepository(user",{"_index":474,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":536,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":539,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":395,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":396,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interceptor",{"_index":300,"title":{},"body":{"controllers/CatController.html":{}}}],["isactive",{"_index":235,"title":{},"body":{"entities/Cat.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{}}}],["isdate",{"_index":372,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["isemail",{"_index":406,"title":{},"body":{"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{}}}],["ismatchpassword",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":366,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["isnumber",{"_index":368,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["isnumber,isdate",{"_index":370,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["join",{"_index":566,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtmodule",{"_index":456,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":458,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["jwtverify",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{}}}],["kamil",{"_index":573,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"entities/User.html":{}}}],["legend",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":579,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":556,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3000/cat",{"_index":302,"title":{},"body":{"controllers/CatController.html":{}}}],["loggermiddleware",{"_index":330,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/CatModule.html":{},"injectables/LoggerMiddleware.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["logginginterceptor",{"_index":293,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"controllers/CatController.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(requestbody",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(requestbody:loginuserdto",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser",{"_index":431,"title":{},"body":{"controllers/UserController.html":{}}}],["loginuser(@body",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["loginuser(requestbody",{"_index":435,"title":{},"body":{"controllers/UserController.html":{}}}],["loginuserdto",{"_index":181,"title":{"classes/LoginUserDTO.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["matching",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["metadata",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["middleware",{"_index":299,"title":{},"body":{"controllers/CatController.html":{},"injectables/LoggerMiddleware.html":{}}}],["middlewareconsumer",{"_index":322,"title":{},"body":{"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["miscellaneous",{"_index":512,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":555,"title":{},"body":{"index.html":{}}}],["mod",{"_index":518,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mode",{"_index":545,"title":{},"body":{"index.html":{}}}],["module",{"_index":42,"title":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":44,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":568,"title":{},"body":{"index.html":{}}}],["msg",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["mssql",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["myśliwiec",{"_index":574,"title":{},"body":{"index.html":{}}}],["name",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/UpdateCatDTO.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":533,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":578,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":399,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs_demo",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["nestmiddleware",{"_index":391,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":326,"title":{},"body":{"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["new",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"injectables/CatService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":387,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{}}}],["next.handle().pipe(tap",{"_index":403,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nextfunction",{"_index":388,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["node.js",{"_index":524,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":351,"title":{},"body":{"injectables/CatService.html":{}}}],["notfoundexception('cat",{"_index":360,"title":{},"body":{"injectables/CatService.html":{}}}],["npm",{"_index":538,"title":{},"body":{"index.html":{}}}],["number",{"_index":237,"title":{},"body":{"entities/Cat.html":{},"controllers/CatController.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{}}}],["object",{"_index":167,"title":{},"body":{"guards/AuthGuard.html":{}}}],["observable",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{}}}],["open",{"_index":557,"title":{},"body":{"index.html":{}}}],["optional",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["options",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":583,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":494,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":284,"title":{},"body":{"controllers/CatController.html":{}}}],["parameters",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":285,"title":{},"body":{"controllers/CatController.html":{}}}],["password",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"entities/User.html":{}}}],["payload",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["please",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{},"index.html":{}}}],["port",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatController.html":{},"controllers/UserController.html":{}}}],["post('/login",{"_index":436,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/register",{"_index":439,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":262,"title":{},"body":{"controllers/CatController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":238,"title":{},"body":{"entities/Cat.html":{},"entities/User.html":{}}}],["private",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CatService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["production",{"_index":547,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":523,"title":{},"body":{"index.html":{}}}],["project",{"_index":558,"title":{},"body":{"index.html":{}}}],["promise",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{}}}],["properties",{"_index":234,"title":{"properties.html":{}},"body":{"entities/Cat.html":{},"classes/CreateCatDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{}}}],["providers",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatController.html":{}}}],["put(':id",{"_index":281,"title":{},"body":{"controllers/CatController.html":{}}}],["read",{"_index":567,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["registed",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["register",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(requestbody",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["registeruser",{"_index":432,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["registeruser(@body",{"_index":445,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(registeruserdto",{"_index":472,"title":{},"body":{"injectables/UserService.html":{}}}],["registeruser(requestbody",{"_index":438,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruserdto",{"_index":186,"title":{"classes/RegisterUserDTO.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["repository",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/CatService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":390,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"controllers/CatController.html":{},"injectables/LoggerMiddleware.html":{}}}],["request.currentuser",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.headers.authorization.split",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requestbody",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["requestbody.password",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestmethod",{"_index":327,"title":{},"body":{"modules/CatModule.html":{}}}],["res",{"_index":386,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["reset",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":301,"title":{},"body":{"controllers/CatController.html":{},"injectables/LoggerMiddleware.html":{}}}],["results",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CatController.html":{},"injectables/CatService.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["role",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["roles",{"_index":423,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":542,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":401,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["sa",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["save",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveuser",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveuser.firstname",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveuser.id",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveuser.lastname",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveuser.role",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":528,"title":{},"body":{"index.html":{}}}],["secret",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["server",{"_index":529,"title":{},"body":{"index.html":{}}}],["service",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["side",{"_index":530,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":459,"title":{},"body":{"modules/UserModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":561,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":520,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.enum.ts",{"_index":514,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:17",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.service",{"_index":443,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["src/auth/auth.service.ts",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/cat/cat.controller.ts",{"_index":261,"title":{},"body":{"controllers/CatController.html":{},"coverage.html":{}}}],["src/cat/cat.controller.ts:14",{"_index":278,"title":{},"body":{"controllers/CatController.html":{}}}],["src/cat/cat.controller.ts:19",{"_index":271,"title":{},"body":{"controllers/CatController.html":{}}}],["src/cat/cat.controller.ts:26",{"_index":277,"title":{},"body":{"controllers/CatController.html":{}}}],["src/cat/cat.controller.ts:30",{"_index":282,"title":{},"body":{"controllers/CatController.html":{}}}],["src/cat/cat.controller.ts:34",{"_index":274,"title":{},"body":{"controllers/CatController.html":{}}}],["src/cat/cat.entity.ts",{"_index":233,"title":{},"body":{"entities/Cat.html":{},"coverage.html":{}}}],["src/cat/cat.entity.ts:12",{"_index":246,"title":{},"body":{"entities/Cat.html":{}}}],["src/cat/cat.entity.ts:27",{"_index":242,"title":{},"body":{"entities/Cat.html":{}}}],["src/cat/cat.entity.ts:6",{"_index":239,"title":{},"body":{"entities/Cat.html":{}}}],["src/cat/cat.entity.ts:9",{"_index":244,"title":{},"body":{"entities/Cat.html":{}}}],["src/cat/cat.module.ts",{"_index":319,"title":{},"body":{"modules/CatModule.html":{}}}],["src/cat/cat.module.ts:16",{"_index":323,"title":{},"body":{"modules/CatModule.html":{}}}],["src/cat/cat.service.ts",{"_index":335,"title":{},"body":{"injectables/CatService.html":{},"coverage.html":{}}}],["src/cat/cat.service.ts:14",{"_index":343,"title":{},"body":{"injectables/CatService.html":{}}}],["src/cat/cat.service.ts:21",{"_index":346,"title":{},"body":{"injectables/CatService.html":{}}}],["src/cat/cat.service.ts:24",{"_index":348,"title":{},"body":{"injectables/CatService.html":{}}}],["src/cat/cat.service.ts:27",{"_index":350,"title":{},"body":{"injectables/CatService.html":{}}}],["src/cat/cat.service.ts:37",{"_index":345,"title":{},"body":{"injectables/CatService.html":{}}}],["src/cat/cat.service.ts:8",{"_index":341,"title":{},"body":{"injectables/CatService.html":{}}}],["src/cat/dto/cat.dto.ts",{"_index":364,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"coverage.html":{}}}],["src/cat/dto/cat.dto.ts:11",{"_index":365,"title":{},"body":{"classes/CreateCatDTO.html":{}}}],["src/cat/dto/cat.dto.ts:16",{"_index":414,"title":{},"body":{"classes/UpdateCatDTO.html":{}}}],["src/cat/dto/cat.dto.ts:18",{"_index":415,"title":{},"body":{"classes/UpdateCatDTO.html":{}}}],["src/cat/dto/cat.dto.ts:21",{"_index":413,"title":{},"body":{"classes/UpdateCatDTO.html":{}}}],["src/cat/dto/cat.dto.ts:4",{"_index":367,"title":{},"body":{"classes/CreateCatDTO.html":{}}}],["src/cat/dto/cat.dto.ts:6",{"_index":369,"title":{},"body":{"classes/CreateCatDTO.html":{}}}],["src/enum/role.enum",{"_index":426,"title":{},"body":{"entities/User.html":{}}}],["src/enum/role.enum.ts",{"_index":515,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/guard/auth.guard",{"_index":295,"title":{},"body":{"controllers/CatController.html":{},"controllers/UserController.html":{}}}],["src/guard/auth.guard.ts",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/guard/auth.guard.ts:7",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guard/auth.guard.ts:9",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/interceptors/logging.interceptor",{"_index":294,"title":{},"body":{"controllers/CatController.html":{}}}],["src/interceptors/logging.interceptor.ts",{"_index":394,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/logging.interceptor.ts:7",{"_index":398,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/main.ts",{"_index":490,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middlewares/logging.middleware",{"_index":331,"title":{},"body":{"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["src/middlewares/logging.middleware.ts",{"_index":383,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/middlewares/logging.middleware.ts:6",{"_index":389,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/user/dto/user.dto",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/dto/user.dto.ts",{"_index":405,"title":{},"body":{"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:11",{"_index":412,"title":{},"body":{"classes/RegisterUserDTO.html":{}}}],["src/user/dto/user.dto.ts:16",{"_index":407,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["src/user/dto/user.dto.ts:18",{"_index":408,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["src/user/dto/user.dto.ts:5",{"_index":410,"title":{},"body":{"classes/RegisterUserDTO.html":{}}}],["src/user/dto/user.dto.ts:7",{"_index":411,"title":{},"body":{"classes/RegisterUserDTO.html":{}}}],["src/user/dto/user.dto.ts:9",{"_index":409,"title":{},"body":{"classes/RegisterUserDTO.html":{}}}],["src/user/user.controller.ts",{"_index":428,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:11",{"_index":440,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:16",{"_index":437,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:21",{"_index":434,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":416,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:11",{"_index":418,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:13",{"_index":421,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:15",{"_index":417,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:18",{"_index":422,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:20",{"_index":420,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:23",{"_index":425,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:9",{"_index":419,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module.ts",{"_index":452,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.module.ts:21",{"_index":453,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["src/user/user.service.ts",{"_index":463,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:14",{"_index":473,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":471,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":469,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:8",{"_index":467,"title":{},"body":{"injectables/UserService.html":{}}}],["ssl",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":543,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":546,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":548,"title":{},"body":{"index.html":{}}}],["started",{"_index":522,"title":{"index.html":{}},"body":{}}],["starter",{"_index":535,"title":{},"body":{"index.html":{}}}],["statements",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":570,"title":{},"body":{"index.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Cat.html":{},"classes/CreateCatDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["succesfully",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":562,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":581,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["sửa",{"_index":381,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["table",{"_index":379,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":400,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["test",{"_index":551,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":554,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":553,"title":{},"body":{"index.html":{}}}],["tests",{"_index":550,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":560,"title":{},"body":{"index.html":{}}}],["this.appservice.calc",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appservice.gethello",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(requestbody",{"_index":448,"title":{},"body":{"controllers/UserController.html":{}}}],["this.authservice.register(requestbody",{"_index":446,"title":{},"body":{"controllers/UserController.html":{}}}],["this.catrepository.create(createcatdto",{"_index":355,"title":{},"body":{"injectables/CatService.html":{}}}],["this.catrepository.find",{"_index":357,"title":{},"body":{"injectables/CatService.html":{}}}],["this.catrepository.findoneby",{"_index":358,"title":{},"body":{"injectables/CatService.html":{}}}],["this.catrepository.save(cat",{"_index":356,"title":{},"body":{"injectables/CatService.html":{}}}],["this.catservice.createcat(createcatdto",{"_index":310,"title":{},"body":{"controllers/CatController.html":{}}}],["this.catservice.deletebyid(id",{"_index":316,"title":{},"body":{"controllers/CatController.html":{}}}],["this.catservice.findallcat",{"_index":305,"title":{},"body":{"controllers/CatController.html":{}}}],["this.catservice.findbyid(id",{"_index":312,"title":{},"body":{"controllers/CatController.html":{}}}],["this.catservice.updatebyid(id",{"_index":314,"title":{},"body":{"controllers/CatController.html":{}}}],["this.createdate",{"_index":255,"title":{},"body":{"entities/Cat.html":{}}}],["this.findbyid(id",{"_index":359,"title":{},"body":{"injectables/CatService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.updatedate",{"_index":258,"title":{},"body":{"entities/Cat.html":{}}}],["this.userrepository.create(registeruserdto",{"_index":475,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":478,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":477,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":476,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findalluser",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(payload.email",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.userservice.findbyemail(requestbody.email",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.registeruser(requestbody",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["thiết",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CatService.html":{}}}],["thuột",{"_index":376,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["thêm",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["token",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["touch",{"_index":571,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":250,"title":{},"body":{"entities/Cat.html":{},"entities/User.html":{},"dependencies.html":{}}}],["trong",{"_index":378,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["true",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"entities/Cat.html":{},"entities/User.html":{}}}],["try",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{}}}],["twitter",{"_index":577,"title":{},"body":{"index.html":{}}}],["type",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/Cat.html":{},"controllers/CatController.html":{},"modules/CatModule.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["typeorm",{"_index":248,"title":{},"body":{"entities/Cat.html":{},"injectables/CatService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([cat",{"_index":332,"title":{},"body":{"modules/CatModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":457,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forrootasync",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["types/bcrypt",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":534,"title":{},"body":{"index.html":{}}}],["tính",{"_index":377,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["tạo",{"_index":373,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["tất",{"_index":374,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["unauthorizedexception",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unit",{"_index":549,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CatService.html":{}}}],["unlicensed",{"_index":590,"title":{},"body":{"properties.html":{}}}],["updatebyid",{"_index":339,"title":{},"body":{"injectables/CatService.html":{}}}],["updatebyid(id",{"_index":349,"title":{},"body":{"injectables/CatService.html":{}}}],["updatecatbyid",{"_index":268,"title":{},"body":{"controllers/CatController.html":{}}}],["updatecatbyid(@param('id",{"_index":313,"title":{},"body":{"controllers/CatController.html":{}}}],["updatecatbyid(id",{"_index":279,"title":{},"body":{"controllers/CatController.html":{}}}],["updatecatdto",{"_index":280,"title":{"classes/UpdateCatDTO.html":{}},"body":{"controllers/CatController.html":{},"injectables/CatService.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{},"coverage.html":{}}}],["updatecatdto.updatedate",{"_index":361,"title":{},"body":{"injectables/CatService.html":{}}}],["updatecreatedate",{"_index":254,"title":{},"body":{"entities/Cat.html":{}}}],["updatedate",{"_index":256,"title":{},"body":{"entities/Cat.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["updateupdatedate",{"_index":257,"title":{},"body":{"entities/Cat.html":{}}}],["use",{"_index":384,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":385,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["usefactory",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":288,"title":{},"body":{"controllers/CatController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":303,"title":{},"body":{"controllers/CatController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":287,"title":{},"body":{"controllers/CatController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":297,"title":{},"body":{"controllers/CatController.html":{}}}],["useinterceptors(logginginterceptor",{"_index":298,"title":{},"body":{"controllers/CatController.html":{}}}],["user",{"_index":70,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@exclude",{"_index":424,"title":{},"body":{"entities/User.html":{}}}],["user.controller",{"_index":454,"title":{},"body":{"modules/UserModule.html":{}}}],["user.entity",{"_index":455,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":442,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.entity",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["userbyemail",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.firstname",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.id",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.lastname",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["userbyemail.role",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":427,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":55,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":468,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":124,"title":{"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{}}}],["validator",{"_index":371,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateCatDTO.html":{},"dependencies.html":{}}}],["value",{"_index":517,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["version",{"_index":588,"title":{},"body":{"properties.html":{}}}],["void",{"_index":325,"title":{},"body":{"modules/CatModule.html":{},"injectables/LoggerMiddleware.html":{},"modules/UserModule.html":{}}}],["vài",{"_index":382,"title":{},"body":{"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["watch",{"_index":544,"title":{},"body":{"index.html":{}}}],["website",{"_index":575,"title":{},"body":{"index.html":{}}}],["weight",{"_index":236,"title":{},"body":{"entities/Cat.html":{},"classes/CreateCatDTO.html":{},"classes/UpdateCatDTO.html":{}}}],["world",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":565,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/CatModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                getHi\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHi\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHi()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/hi')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n\n\n// Request -> Controller -> Service -> Controller -> Repository\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get() //Decorator Get(), Post(), Put(), Delete()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n  @Get('/hi')\n  getHi(){\n    return 'Hi there!';\n  }\n  // @Get('/calc')\n  // getCalc(){\n  //   return this.appService.calc();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCatModule\n\nCatModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CatModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { Cat } from './cat/cat.entity';\nimport { CatModule } from './cat/cat.module';\nimport { User } from './user/user.entity';\nimport { UserModule } from './user/user.module';\n@Module({\n  imports: [\n    // TypeOrmModule.forRoot({\n    //   type: 'mssql',\n    //   host: 'localhost',\n    //   port: 1433,\n    //   username: 'sa',\n    //   password: '123',\n    //   database: 'nestjs_demo',\n    //   entities: [Cat, User],\n    //   synchronize: true,\n    //   options: {\n    //     encrypt: false, // Disable SSL\n    //   },\n    // }),\n\n    ConfigModule.forRoot(),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mssql',\n        host: configService.get('DB_HOST'),\n        port: +configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE'),\n        entities: [Cat, User], // Thêm các entities cần thiết\n        synchronize: true,\n        options: {\n          encrypt: false, // Disable SSL\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    CatModule,\n    UserModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n  // calc(){\n  //   return 1+1;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/auth.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, ForbiddenException, UnauthorizedException, BadRequestException } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private userService: UserService) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n   \n    try {\n      const request = context.switchToHttp().getRequest();\n\n      // get token from header\n      const token = request.headers.authorization.split(' ')[1];\n      // jwtVerify\n      if (!token) {\n        throw new ForbiddenException('Please provide access token');\n  \n      }\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: process.env.JWT_SECRET,\n      });\n      // jwtVerify validate token\n      const user = await this.userService.findByEmail(payload.email);\n      if (!user) {\n        throw new BadRequestException(\n          'User not belong to token, please try again'\n        );\n      }\n      // Assign user to request object\n      request.currentUser = user;\n      \n    } catch (error) {\n      console.log('error from auth guard', error);\n      throw new ForbiddenException('Invalid token or exprired')\n    }\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(requestBody: LoginUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            LoginUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(requestBody: RegisterUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            RegisterUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { LoginUserDTO, RegisterUserDTO } from \"src/user/dto/user.dto\";\nimport { UserService } from \"src/user/user.service\";\nimport * as bcrypt from 'bcrypt';\n\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private jwtService: JwtService,\n        private userService: UserService\n    ) { }\n    async register(requestBody: RegisterUserDTO) {\n        // check email is exist\n        const userByEmail = await this.userService.findByEmail(requestBody.email);\n        if (userByEmail) {\n            throw new BadRequestException('Email already exist! ');\n        }\n        // hash password\n        const hashPassword = await bcrypt.hash(requestBody.password, 10);\n        requestBody.password = hashPassword;\n        // save to database\n        const saveUser = await this.userService.registerUser(requestBody);\n        //generate jwt token\n        const payload = {\n            id: saveUser.id,\n            firstName: saveUser.firstName,\n            lastName: saveUser.lastName,\n            email:saveUser.email,\n            role: saveUser.role,\n        };\n        const access_token = await this.jwtService.signAsync(payload, {\n            secret: process.env.JWT_SECRET,\n        });\n        return {\n            msg: 'User has been registed!',\n            access_token,\n        }\n    }\n    async login(requestBody:LoginUserDTO){\n        //check email\n        const userByEmail = await this.userService.findByEmail(requestBody.email);\n        if (!userByEmail) {\n            throw new BadRequestException('Invalid credentials! ');\n        }\n        // check password\n        const isMatchPassword =  await bcrypt.compare(requestBody.password,userByEmail.password);\n        if(!isMatchPassword){\n            throw new BadRequestException('Invalid credentials! ');\n        }\n        //generate jwt token\n        const payload = {\n            id: userByEmail.id,\n            firstName: userByEmail.firstName,\n            lastName: userByEmail.lastName,\n            email:userByEmail.email,\n            role: userByEmail.role,\n        };\n        const access_token = await this.jwtService.signAsync(payload, {\n            secret: process.env.JWT_SECRET,\n        });\n        return {\n            msg: 'User has been login succesfully',\n            access_token,\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Cat.html":{"url":"entities/Cat.html","title":"entity - Cat","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Cat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cat/cat.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cat/cat.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cat/cat.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cat/cat.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cat/cat.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, BeforeInsert } from 'typeorm';\nimport { Exclude } from 'class-transformer';\n@Entity()\nexport class Cat {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n    @Column()\n    @Exclude()\n    weight: number;\n\n    // @Column({ type: 'datetime' })\n    // createDate: Date;\n    // @BeforeInsert()\n    // updateCreateDate() {\n    //     this.createDate = new Date();\n    // }\n    // @Column({ type: 'datetime' })\n    // updateDate: Date;\n    // @BeforeInsert()\n    // updateUpdateDate() {\n    //     this.updateDate = new Date();\n    // }\n    @Column({ default: true })\n    isActive: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CatController.html":{"url":"controllers/CatController.html","title":"controller - CatController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CatController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cat/cat.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createCat\n                            \n                            \n                                    \n                                deleteCatById\n                            \n                            \n                                    \n                                findCatById\n                            \n                            \n                                    \n                                getAllCat\n                            \n                            \n                                    \n                                updateCatById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createCat\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCat(createCatDto: CreateCatDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/cat/cat.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCatDto\n                                            \n                                                            CreateCatDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteCatById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCatById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cat/cat.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCatById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCatById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cat/cat.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllCat\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllCat()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/cat/cat.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateCatById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCatById(id: number, updateCatDto: UpdateCatDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cat/cat.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCatDto\n                                            \n                                                            UpdateCatDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Put, Delete, ParseIntPipe, ClassSerializerInterceptor, UseInterceptors, UseGuards } from '@nestjs/common';\nimport { CatService } from './cat.service';\nimport { CreateCatDTO,UpdateCatDTO } from './dto/cat.dto';\nimport { LoggingInterceptor } from 'src/interceptors/logging.interceptor';\nimport { AuthGuard } from 'src/guard/auth.guard';\n@Controller('cats')\n@UseInterceptors(ClassSerializerInterceptor)\n@UseInterceptors(LoggingInterceptor)\nexport class CatController {\n    constructor(private catService: CatService) { };\n    // request >> middleware >> guard >> interceptor >> response\n    @Get()  // localhost:3000/cat\n    // @UseGuards(AuthGuard)\n    getAllCat() {\n        console.log('Second');   \n        return this.catService.findAllCat();\n    }\n    @Post()\n    createCat(@Body() createCatDto: CreateCatDTO) {\n        // const currentDate = new Date();\n        // createCatDto.createDate = currentDate;\n        // createCatDto.updateDate = currentDate;\n        return this.catService.createCat(createCatDto)\n    }\n    @Get(':id')\n    findCatById(@Param('id', ParseIntPipe) id: number) {\n        return this.catService.findById(id);\n    }\n    @Put(':id')\n    updateCatById(@Param('id', ParseIntPipe) id: number, @Body() updateCatDto: UpdateCatDTO) {\n        return this.catService.updateById(id, updateCatDto)\n    }\n    @Delete(':id')\n    deleteCatById(@Param('id', ParseIntPipe) id: number) {\n        return this.catService.deleteById(id)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CatModule.html":{"url":"modules/CatModule.html","title":"module - CatModule","body":"\n                   \n\n\n\n\n    Modules\n    CatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CatModule\n\n\n\ncluster_CatModule_providers\n\n\n\n\nCatService\n\nCatService\n\n\n\nCatModule\n\nCatModule\n\nCatModule -->\n\nCatService->CatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cat/cat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CatService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CatController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cat/cat.module.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common';\nimport { CatController } from './cat.controller';\nimport { CatService } from './cat.service';\nimport { Cat } from './cat.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LoggerMiddleware } from 'src/middlewares/logging.middleware';\n\n\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Cat])],\n  controllers: [CatController],\n  providers: [CatService]\n})\nexport class CatModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes( 'cats' );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CatService.html":{"url":"injectables/CatService.html","title":"injectable - CatService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cat/cat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createCat\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                findAllCat\n                            \n                            \n                                findById\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(catRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cat/cat.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        catRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCat\n                        \n                    \n                \n            \n            \n                \ncreateCat(createCatDto: CreateCatDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cat/cat.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCatDto\n                                            \n                                                            CreateCatDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cat/cat.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllCat\n                        \n                    \n                \n            \n            \n                \nfindAllCat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/cat/cat.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cat/cat.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateById(id: number, updateCatDto: UpdateCatDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cat/cat.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCatDto\n                                            \n                                                            UpdateCatDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Cat } from './cat.entity';\nimport { CreateCatDTO, UpdateCatDTO } from './dto/cat.dto';\n\n@Injectable()\nexport class CatService {\n    constructor(\n        @InjectRepository(Cat)\n        private catRepository: Repository,\n    ) { }\n    // CRUD\n    createCat(createCatDto: CreateCatDTO) {\n        // const currentDate = new Date();\n        // createCatDto.createDate = currentDate;\n        // createCatDto.updateDate = currentDate;\n        const cat = this.catRepository.create(createCatDto);\n        return this.catRepository.save(cat);\n    }\n    findAllCat() {\n        return this.catRepository.find();\n    }\n    findById(id: number) {\n        return this.catRepository.findOneBy({ id });\n    }\n    async updateById(id: number, updateCatDto: UpdateCatDTO) {\n        let cat = await this.findById(id);\n        if (!cat) {\n            throw new NotFoundException('Cat does not exist');\n        }\n        // const currentDate = new Date();\n        // updateCatDto.updateDate = currentDate;\n        cat = { ...cat, ...updateCatDto };\n        return this.catRepository.save(cat);\n    }\n    async deleteById(id: number) {\n        let cat = await this.findById(id);\n        if (!cat) {\n            throw new NotFoundException('Cat does not exist');\n        }\n        cat.isActive =false;\n        return this.catRepository.save(cat);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCatDTO.html":{"url":"classes/CreateCatDTO.html","title":"class - CreateCatDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCatDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cat/dto/cat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/cat/dto/cat.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cat/dto/cat.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cat/dto/cat.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber,IsDate } from 'class-validator';\nexport class CreateCatDTO {\n    @IsNotEmpty()\n    name: string;\n    @IsNumber()\n    weight: number;\n    // @IsDate()\n    // createDate: Date;\n    // @IsDate()\n    // updateDate: Date;\n    isActive: boolean;\n    // Tạo tất cả thuột tính trong table\n}\nexport class UpdateCatDTO {\n    @IsNotEmpty()\n    name: string;\n    @IsNumber()\n    weight: number;\n    // @IsDate()\n    // updateDate: Date;\n    isActive: boolean;\n    // Chỉ sửa 1 vài thuột tính\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/logging.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middlewares/logging.middleware.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log('Request from middleware')\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/logging.interceptor.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        console.log('Fisrt');\n        return next.handle().pipe(tap(() => console.log('Third')));\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDTO.html":{"url":"classes/LoginUserDTO.html","title":"class - LoginUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport class RegisterUserDTO {\n    @IsNotEmpty()\n    firstName: string;\n    @IsNotEmpty()\n    lastName: string;\n    @IsEmail()\n    email: string;\n    @IsNotEmpty()\n    password: string;\n\n}\nexport class LoginUserDTO {\n    @IsEmail()\n    email: string;\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDTO.html":{"url":"classes/RegisterUserDTO.html","title":"class - RegisterUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport class RegisterUserDTO {\n    @IsNotEmpty()\n    firstName: string;\n    @IsNotEmpty()\n    lastName: string;\n    @IsEmail()\n    email: string;\n    @IsNotEmpty()\n    password: string;\n\n}\nexport class LoginUserDTO {\n    @IsEmail()\n    email: string;\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCatDTO.html":{"url":"classes/UpdateCatDTO.html","title":"class - UpdateCatDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCatDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cat/dto/cat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/cat/dto/cat.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cat/dto/cat.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cat/dto/cat.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber,IsDate } from 'class-validator';\nexport class CreateCatDTO {\n    @IsNotEmpty()\n    name: string;\n    @IsNumber()\n    weight: number;\n    // @IsDate()\n    // createDate: Date;\n    // @IsDate()\n    // updateDate: Date;\n    isActive: boolean;\n    // Tạo tất cả thuột tính trong table\n}\nexport class UpdateCatDTO {\n    @IsNotEmpty()\n    name: string;\n    @IsNumber()\n    weight: number;\n    // @IsDate()\n    // updateDate: Date;\n    isActive: boolean;\n    // Chỉ sửa 1 vài thuột tính\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ROLES\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'USER'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, BeforeInsert } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { ROLES } from 'src/enum/role.enum';\n\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column()\n    firstName: string;\n    @Column()\n    lastName: string;\n    @Column()\n    email: string;\n    @Column()\n    @Exclude()\n    password: string;\n    @Column({ default: true })\n    isActive: boolean;\n    @Column({default: 'USER'})\n    @Exclude()\n    role: ROLES ;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getAllUser\n                            \n                            \n                                    \n                                loginUser\n                            \n                            \n                                    \n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getAllUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginUser(requestBody: LoginUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            LoginUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(requestBody: RegisterUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            RegisterUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { LoginUserDTO, RegisterUserDTO } from './dto/user.dto';\nimport { UserService } from './user.service';\nimport { AuthService } from 'src/auth/auth.service';\nimport { AuthGuard } from 'src/guard/auth.guard';\n\n@Controller('/api/v1/user')\nexport class UserController {\n    constructor(private userService: UserService, private authService: AuthService) { }\n    @Post('/register')\n    registerUser(@Body() requestBody: RegisterUserDTO) {\n        return this.authService.register(requestBody);\n\n    }\n    @Post('/login')\n    loginUser(@Body() requestBody: LoginUserDTO) {\n        return this.authService.login(requestBody);\n    }\n    @Get()\n    @UseGuards(AuthGuard)\n    getAllUser(){\n        return this.userService.findAllUser();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.module.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { LoggerMiddleware } from 'src/middlewares/logging.middleware';\nimport { User } from './user.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]),\n  JwtModule.register({\n    secret: process.env.JWT_SECRET,\n    signOptions: { expiresIn: '1d' },\n  }),],\n  controllers: [UserController],\n  providers: [UserService, AuthService]\n})\n\nexport class UserModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes('user');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAllUser\n                            \n                            \n                                findByEmail\n                            \n                            \n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAllUser\n                        \n                    \n                \n            \n            \n                \nfindAllUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByEmail\n                        \n                    \n                \n            \n            \n                \nfindByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerUser\n                        \n                    \n                \n            \n            \n                \nregisterUser(registerUserDto: RegisterUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\nimport { RegisterUserDTO } from './dto/user.dto';\n\n@Injectable()\nexport class UserService {\n    constructor(\n        @InjectRepository(User)\n        private userRepository: Repository,\n    ) { }\n    \n    registerUser(registerUserDto: RegisterUserDTO) {\n        // const currentDate = new Date();\n        // createCatDto.createDate = currentDate;\n        // createCatDto.updateDate = currentDate;\n        const user = this.userRepository.create(registerUserDto);\n        return this.userRepository.save(user);\n    }\n    findByEmail(email: string) {\n        return this.userRepository.findOneBy({ email });\n    }\n    findAllUser(){\n        return this.userRepository.find();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cat/cat.controller.ts\n            \n            controller\n            CatController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/cat/cat.entity.ts\n            \n            entity\n            Cat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cat/cat.service.ts\n            \n            injectable\n            CatService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/cat/dto/cat.dto.ts\n            \n            class\n            CreateCatDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cat/dto/cat.dto.ts\n            \n            class\n            UpdateCatDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guard/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middlewares/logging.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            LoginUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            RegisterUserDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.1\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            mssql : ^9.3.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ROLES   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/enum/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLES\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 MOD\n                            \n                        \n                        \n                            \n                                Value : MOD\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CatModule\n\n\n\ncluster_CatModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCatModule\n\nCatModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCatService\n\nCatService\n\nCatModule -->\n\nCatService->CatModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
